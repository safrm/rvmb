#!/bin/sh
#Rapid VM builder - http://safrm.net/projects/rvmb
#author: Miroslav Safr <miroslav.safr@gmail.com> 
VERSION=NA
VERSION_DATE=NA

TARGET_DIR=/usr/share/rvmb/targets
TARGET_FILE=$TARGET_DIR/ubuntu-12.04-x86_64-mini
BASENAME=`basename $0`
SHARE_DIR=./share
MEMORY=1024
TS=$(date +%Y_%m_%d__%H_%M)

#helpers
alias echo="/bin/echo -e"
log()  { printf  "%b\n" "$*"; }
debug(){ [ ${DEBUG_FLAG:-0} -eq 0 ] || echo "Running($#): $*"; }
verbose(){ [ ${VERBOSE_FLAG:-0} -eq 0 ] || echo "$*"; }
fail() { log "\nERROR: $*\n" ; exit 1 ; }

usage() {
    echo "$BASENAME ${VERSION} - Rapid VM builder for qemu-kvm"
    echo " http://safrm.net/projects/rvmo/"
    echo "Usage:$BASENAME [COMMAND] [OPTIONS]..."
    echo " COMMAND ............................ specify step execution "
    echo "  list-targets"
    echo "  prepare-host create-disk download-iso run-live-iso install-image "
    echo "  start-vm stop-vm status"
    echo "  backup-image mount-image chroot-image"
    echo "  connect-ssh connect-vnc"
    echo " OPTIONS: "
    echo " -h, --help ......................... shows command line help"
    echo " -v, --verbose ...................... prints more output"
    echo " -d, --debug ........................ enable debug"
    echo " -t, --target <conf-file> ........... target config file path"
    echo " -c, --clone <number> ............... cloning increment number (adds postfix, increases ports etc.)"
    echo " -m, --memory <kB> .................. uses specific VM memory amount"
    echo " -u, --user <VM-user> ............... uses own VM user (default user)"
    echo " -vnc ............................... enable vnc on display (:1 + clone)"
    echo " -V, --version  ..................... prints version of the scripts"
    echo " "
}

#cmdline parsing 
while [ $# -gt 0 ]; do
  case "$1" in
    prepare-host | create-disk | download-iso | run-live-iso | install-image | start-vm | stop-vm | status | connect-ssh | connect-vnc | backup-image | mount-image | chroot-image)
        [ -z "$DEFAULT_CMD" ] || fail "Only one command can be run at the time"
	DEFAULT_CMD=$1 ;;
    list-targets )
		ls -1 $TARGET_DIR ; exit 0;;
    -h | --help) 
        usage ; exit 0 ;;
    -vnc  )	
        VNC_FLAG=-vnc ;;
     -v|--verbose) 
        VERBOSE_FLAG=1 ;;
    -d | --debug) 
        DEBUG_FLAG=1 ;;
    -t | --target ) shift;
        TARGET_FILE=$1 
		if [ $(echo $TARGET_FILE | head -c1) != '/' -a ! -f $TARGET_FILE ]; then 
			TARGET_FILE=$TARGET_DIR/$TARGET_FILE
		fi ;;
    -c | --clone ) shift;
        CLONE_NO=$1 
		if [ $CLONE_NO -ne 0 -o $CLONE_NO -eq 0 2> /dev/null ]; then
			debug "integer CLONE_NO=$CLONE_NO ok"
		else
			fail "$CLONE_NO is not valid number" 
		fi ;;
    -m | --memory ) shift;
        MEMORY=$1 
		if [ $MEMORY -ne 0 -o $MEMORY -eq 0 2> /dev/null ]; then
			debug "integer MEMORY=$MEMORY ok"
		else
			fail "$MEMORY is not valid number" 
		fi ;;
    -u | --user ) shift;
        VMUSER=$1 ;;
    * )      
        fail "unknown argument $1"  ;;
  esac
  shift
done

#read configuration
[ -f "$TARGET_FILE" ] && debug "file exists $TARGET_FILE" || fail "Configuration file $TARGET_FILE does not exist"
. $TARGET_FILE
DISK_NAME=`basename $TARGET_FILE`
echo "Using target configuration from $TARGET_FILE for $NAME"
verbose "`cat $TARGET_FILE` \n" 

#fixes for clonned environments
BASE_DISK_NAME=$DISK_NAME
if [ -n "$CLONE_NO" ]; then
	DISK_NAME=$DISK_NAME$CLONE_NO
    HOST_SSH_PORT=$(($HOST_SSH_PORT + $CLONE_NO)) ;
	verbose "CLONNED MODIFICATIONS:\nDISK_NAME=$DISK_NAME\nHOST_SSH_PORT=$HOST_SSH_PORT"
fi
MONITOR_FILE=./$DISK_NAME-running
verbose "MONITOR_FILE=$MONITOR_FILE"
if [ -n $VNC_FLAG ]; then
	VNC_PORT=1
	[ -n "$CLONE_NO" ] && VNC_PORT=$(($VNC_PORT + $CLONE_NO)) ;
	VNC_PORT=:$VNC_PORT
	echo "VNC OPTIONS: $VNC_FLAG $VNC_PORT"
fi

rvmb_installation()
{
	debug "rvmb_installation:"
	rvmb_prepare
	rvmb_create_disk
	#we run it straight
	if [ -e $BASE_DISK_NAME.$DISK_FORMAT_EXT -a -n $CLONE_NO ]; then
		rvmb_start_vm
	else
		rvmb_install_image
	fi
}

rvmb_run_live_iso() 
{
	debug "rvmb_run_live_iso:"
	rvmb_prepare
	rvmb_download_iso
	echo "Runing live iso $ISO_FILE_LOCAL"
	qemu-system-x86_64 $VNC_FLAG $VNC_PORT -m $MEMORY -boot d -cdrom $ISO_FILE_LOCAL -enable-kvm -smp 2 -net nic,model=virtio -net user,net=192.168.101.0/24,hostfwd=tcp::$HOST_SSH_PORT-:22 -fsdev  local,security_model=none,id=fsdev0,path=$SHARE_DIR -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=hostshare -monitor unix:$MONITOR_FILE,server,nowait
}

#check and install host 
rvmb_prepare()
{
	debug "rvmb_prepare:"
	REQUIRED_PACKAGES="qemu-system-x86 qemu-utils kvm "
	dpkg-query -l $REQUIRED_PACKAGES > /dev/null
	if [ $? != 0 ]; then
		sudo apt-get install -y $REQUIRED_PACKAGES  || fail "Failed to install required packages"
	fi
}

rvmb_create_disk()
{
	debug "rvmb_create_disk:"
	if [ -e $DISK_NAME.$DISK_FORMAT_EXT ]; then
		echo "Disk $DISK_NAME.$DISK_FORMAT_EXT exists, Do you want to overwrite it Y/n ?"
		while true
	    do
    	    KEY=$(bash -c 'read -p " Do you want to continue (d=delete dir and continue)? [y/n/d] " -n 1 ans;echo "$ans"')
    	    echo ""
    	    case $KEY in
    		    y|Y|YES|yes|Yes) break ;;
    		    n|N|no|NO|No|*)
        		    echo "Aborting - you entered $KEY" ;  exit 1 ;;      
		    esac
	    done
	fi
	#clone or create
	if [ -e $BASE_DISK_NAME.$DISK_FORMAT_EXT -a -n $CLONE_NO ]; then
		verbose "Copying image: $BASE_DISK_NAME.$DISK_FORMAT_EXT to $DISK_NAME.$DISK_FORMAT_EXT $DISK_SIZE"
		cp -f $BASE_DISK_NAME.$DISK_FORMAT_EXT $DISK_NAME.$DISK_FORMAT_EXT 
	else
		verbose "Creating image: $DISK_NAME.$DISK_FORMAT_EXT $DISK_SIZE"
		qemu-img create -f $DISK_FORMAT_EXT $DISK_NAME.$DISK_FORMAT_EXT $DISK_SIZE || fail "Image creation failed"
	fi
}

rvmb_download_iso()
{
debug "rvmb_download_iso: Iso image url: $ISO_URL"
#-q=no output, -i=insensitive, -e=regexp
if echo $ISO_URL | grep -q -i -e "^\(ftp\|http\|https\):.*" ; then
	wget -N $ISO_URL || fail "Iso file download failed "
    ISO_FILE_LOCAL="${ISO_URL##*/}"
else
	if [ -f $ISO_URL ]; then	
		debug "Local file $ISO_URL ready"
		ISO_FILE_LOCAL="$ISO_URL"
	else	
		fail "Local file $ISO_URL does not exist"
	fi
fi

}

rvmb_install_image()
{
	debug "rvmb_install_image:"
	rvmb_download_iso
	debug "image:./$DISK_NAME.$DISK_FORMAT_EXT iso:	$ISO_FILE_LOCAL"
	[ -e ./$DISK_NAME.$DISK_FORMAT_EXT ] || fail "Image ./$DISK_NAME.$DISK_FORMAT_EXT does not exist"
	[ -e $ISO_FILE_LOCAL ] || fail "Iso file $ISO_FILE_LOCAL does not exist "
	[ -e $SHARE_DIR ] || mkdir -p $SHARE_DIR

	qemu-system-x86_64 $VNC_FLAG $VNC_PORT -m $MEMORY -boot d -cdrom $ISO_FILE_LOCAL -enable-kvm -smp 2 -net nic,model=virtio -net user,net=192.168.101.0/24,hostfwd=tcp::$HOST_SSH_PORT-:22 -drive file=./$DISK_NAME.$DISK_FORMAT_EXT,if=virtio -fsdev  local,security_model=none,id=fsdev0,path=$SHARE_DIR -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=hostshare -monitor unix:$MONITOR_FILE,server,nowait

}

#run ready VM
rvmb_start_vm() 
{
	debug "rvmb_start_vm"
	[ -e ./$DISK_NAME.$DISK_FORMAT_EXT ] || fail "Image ./$DISK_NAME.$DISK_FORMAT_EXT does not exist"
	#run
	qemu-system-x86_64 $VNC_FLAG $VNC_PORT -m $MEMORY -hda $DISK_NAME.$DISK_FORMAT_EXT -boot c -enable-kvm -smp 2 -net nic,model=virtio -net user,net=192.168.101.0/24,hostfwd=tcp::$HOST_SSH_PORT-:22 -drive file=$DISK_NAME.$DISK_FORMAT_EXT,if=virtio -fsdev  local,security_model=none,id=fsdev0,path=$SHARE_DIR -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=hostshare -monitor unix:$MONITOR_FILE,server,nowait &

	#sudo mount -t 9p -o trans=virtio,version=9p2000.L,posixacl,cache=loose hostshare /share
}

rvmb_stop_vm()
{
	debug "rvmb_stop_vm"
	#using qemu
	debug "Stopping: $MONITOR_FILE"
	echo 'system_powerdown' | socat - UNIX-CONNECT:$MONITOR_FILE	
	if [ -n "$MONITOR_FILE" -a -e $MONITOR_FILE ]; then
		echo " monitor file exits: $MONITOR_FILE, removing it.."
		rm "$MONITOR_FILE"
	fi
}


rvmb_status()
{
	debug "rvmb_status"
	RUNNING=0
	if [ -e $MONITOR_FILE ]; then
		verbose " monitor file exits: $MONITOR_FILE"
		RUNNING=1
	else
		verbose " monitor file does not exits: $MONITOR_FILE"
		RUNNING_PROBLEM="monitor file does not exits "
	fi
	if [ $(pgrep $DISK_NAME.$DISK_FORMAT_EXT) ]; then
		verbose " image $DISK_NAME.$DISK_FORMAT_EXT is running"
		RUNNING=1
	else
		verbose " image $DISK_NAME.$DISK_FORMAT_EXT is not running"
		RUNNING_PROBLEM="${RUNNING_PROBLEM}process with image is not running"
	fi
	if [ $RUNNING -eq 1 ]; then
		echo "running"
		if [ -n "$RUNNING_PROBLEM" ]; then
			echo "$RUNNING_PROBLEM"
			exit 1;
		fi
	else
		echo "not running"
	fi
}


rvmb_connect_vm_ssh()
{
	verbose "VMUSER:$VMUSER PORT:$HOST_SSH_PORT"
	ssh -X ${VMUSER:-user}@localhost -p $HOST_SSH_PORT 
}
rvmb_connect_vm_vnc()
{
	vncviewer -via $USER@localhost  localhost$VNC_PORT
}

rvmb_backup_image()
{
    [ -e ./$DISK_NAME.$DISK_FORMAT_EXT ] || fail "Image ./$DISK_NAME.$DISK_FORMAT_EXT does not exist"
	tar cvjf ./$DISK_NAME.$DISK_FORMAT_EXT_$TS.tar.bz2 ./$DISK_NAME.$DISK_FORMAT_EXT
}

rvmb_mount_image()
{
	:
}

rvmb_chroot_image()
{
	:
}

case $DEFAULT_CMD in
  prepare-host) rvmb_prepare ;;
  create-disk) rvmb_create_disk ;;
  download-iso) rvmb_download_iso ;;
  run-live-iso) rvmb_run_live_iso ;;
  install-image) rvmb_install_image ;;
  start-vm) rvmb_start_vm ;;
  status) rvmb_status ;;
  stop-vm) rvmb_stop_vm ;;
  connect-ssh) rvmb_connect_vm_ssh ;;
  connect-vnc) rvmb_connect_vm_vnc ;;
  mount-image) rvmb_mount_image ;;
  backup-image) rvmb_backup_image ;;
  chroot-image) rvmb_chroot_image ;;
  #automatic target: empty=install, ok=start-vm, running=connect-ssh
  *) 
	if [ ! -e $DISK_NAME.$DISK_FORMAT_EXT ]; then
		debug "$DISK_NAME.$DISK_FORMAT_EXT does not exist"
		rvmb_installation ;
	else
		debug "$DISK_NAME.$DISK_FORMAT_EXT exists"
		# check that runs?
		rvmb_start_vm ;
	fi
esac

